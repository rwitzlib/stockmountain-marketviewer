@using MarketViewer.Contracts.Models.ScanV2.Operands
@using MarketViewer.Contracts.Enums
@using MarketViewer.Contracts.Models.ScanV2
@using FilterOperator = MarketViewer.Contracts.Enums.FilterOperator;
@using MarketViewer.Web.Components.Scan

@inject IJSRuntime JsRuntime;

<MudPaper Elevation="10" id="@Filter.Id" Class="d-flex pa-2 flex-grow-1 gap-4 justify-content-center filter">
    <MudIcon Class="drag-drop" Icon="@Icons.Material.Filled.DragIndicator"></MudIcon>

    <MudSelect @bind-Value="Filter.CollectionModifier" T="string" Label="Collection" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@("All")" />
        <MudSelectItem Value="@("Any")" />
        <MudSelectItem Value="@("Average")" />
    </MudSelect>

    <MudSelect T="OperandType" Label="First Operand" AnchorOrigin="Origin.BottomCenter" ValueChanged="AddFirstOperand" Value="Filter.FirstOperandType">
        @foreach (OperandType type in Enum.GetValues(typeof(OperandType)))
        {
            <MudSelectItem Value="@type">@type</MudSelectItem>
        }
    </MudSelect>

    @if (Filter.FirstOperandType is OperandType.PriceAction)
    {
        <PriceActionOperandComponent Operand="Filter.FirstOperand as PriceActionOperand" ></PriceActionOperandComponent>
    }
    else if (Filter.FirstOperandType is OperandType.Study)
    {
        <StudyOperandComponent Operand="Filter.FirstOperand as StudyOperand"></StudyOperandComponent>
    }
    else if (Filter.FirstOperandType is OperandType.Fixed)
    {
        <ValueOperandComponent Operand="Filter.FirstOperand as FixedOperand"></ValueOperandComponent>
    }

    <MudSelect @bind-Value="Filter.Operator" T="FilterOperator" Label="Operator" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="FilterOperator.gt">@(">")</MudSelectItem>
        <MudSelectItem Value="FilterOperator.ge">@(">=")</MudSelectItem>
        <MudSelectItem Value="FilterOperator.eq">@("==")</MudSelectItem>
        <MudSelectItem Value="FilterOperator.le">@("<=")</MudSelectItem>
        <MudSelectItem Value="FilterOperator.lt">@("<")</MudSelectItem>
    </MudSelect>

    <MudSelect T="OperandType" Label="Second Operand" AnchorOrigin="Origin.BottomCenter" ValueChanged="AddSecondOperand" Value="Filter.SecondOperandType">
        @foreach (OperandType type in Enum.GetValues(typeof(OperandType)))
        {
            <MudSelectItem Value="@type">@type</MudSelectItem>
        }
    </MudSelect>

    @if (Filter.SecondOperandType is OperandType.PriceAction)
    {
        <PriceActionOperandComponent Operand="Filter.SecondOperand as PriceActionOperand"></PriceActionOperandComponent>
    }
    else if (Filter.SecondOperandType is OperandType.Study)
    {
        <StudyOperandComponent Operand="Filter.SecondOperand as StudyOperand"></StudyOperandComponent>
    }
    else if (Filter.SecondOperandType is OperandType.Fixed)
    {
        <ValueOperandComponent Operand="Filter.SecondOperand as FixedOperand"></ValueOperandComponent>
    }

    <MudNumericField @bind-Value="Filter.Timeframe.Multiplier" Label="Multiplier" Variant="Variant.Text" Min="1" Max="60" />

    <MudSelect @bind-Value="Filter.Timeframe.Timespan" T="Timespan" Label="Timespan" AnchorOrigin="Origin.BottomCenter">
        @foreach (Timespan type in Enum.GetValues(typeof(Timespan)))
        {
            <MudSelectItem Value="@type">@type</MudSelectItem>
        }
    </MudSelect>

    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Argument.RemoveFilter(Filter)">Delete</MudButton>
</MudPaper>

@code {
    [Parameter] public ScanArgumentComponent Argument { get; set; }
    [Parameter] public FilterItem Filter { get; set; }

    private IJSInProcessRuntime JsInProcessRuntime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
        }
    }

    private void AddFirstOperand(OperandType type)
    {
        Filter.FirstOperandType = type;
        if (type is OperandType.PriceAction)
        {
            Filter.FirstOperand = new PriceActionOperand();
        }
        else if (type is OperandType.Study)
        {
            Filter.FirstOperand = new StudyOperand();

        }
        else if (type is OperandType.Fixed)
        {
            Filter.FirstOperand = new FixedOperand();
        }
    }

    private void AddSecondOperand(OperandType type)
    {
        Filter.SecondOperandType = type;
        if (type is OperandType.PriceAction)
        {
            Filter.SecondOperand = new PriceActionOperand();
        }
        else if (type is OperandType.Study)
        {
            Filter.SecondOperand = new StudyOperand();

        }
        else if (type is OperandType.Fixed)
        {
            Filter.SecondOperand = new FixedOperand();
        }
    }
}
