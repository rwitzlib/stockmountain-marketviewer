<div>
    @{
        var studiesGroupedByPane = Studies.GroupBy(q => q.Pane).OrderBy(q => q.First().Pane);
        foreach (var studiesInPane in studiesGroupedByPane)
        {
            <div class="list-group">
                @{
                    studiesInPane.OrderBy(q => q.Pane);
                    foreach (var study in studiesInPane)
                    {
                        <div class="list-group-item list-group-item-action">
                            <span>@study.Title</span>
                            <div class="btn-group float-end" role="group" aria-label="study1">
                                <button type="button" class="btn btn-secondary" @onclick="() => MoveStudyUp(study)"><i class="fa-solid fa-arrow-up"></i></button>
                                <button type="button" class="btn btn-secondary" @onclick="() => MoveStudyDown(study)"><i class="fa-solid fa-arrow-down"></i></button>
                                <button type="button" class="btn btn-warning" @onclick="() => UpdateStudy(study)"><i class="fa-solid fa-gear"></i></button>
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteStudy(study)"><i class="fa-solid fa-trash"></i></button>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-success justify-content-center" @onclick="() => CreateStudy(studiesInPane.First().Pane)"><i class="fa-solid fa-plus"></i> Add New Study</button>
            </div>
            <hr />
        }
        if (!Studies.Any())
        {
            <div class="d-flex justify-content-center">
                <button class="btn btn-success justify-content-center" @onclick="() => CreateStudy(0)"><i class="fa-solid fa-plus"></i> Add New Study</button>
            </div>
        }
        else
        {
            var pane = Studies.Max(q => q.Pane);
            <div class="d-flex justify-content-center">
                <button class="btn btn-success justify-content-center" @onclick="() => CreateStudy(pane + 1)"><i class="fa-solid fa-plus"></i> Add New Study</button>
            </div>
        }
    }
    <hr />
    <div class="d-grid gap-2">
        <div class="btn btn-secondary btn-block" @onclick="Close">Cancel</div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ViewStudiesModal { get; set; } = default!;

    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter] public List<Study> Studies { get; set; }

    [Parameter] public StocksResponse AggregateResponse { get; set; }

    [Parameter] public string Id { get; set; }

    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;

    private async Task CreateStudy(int pane)
    {
        var options = new ModalOptions
        {
            DisableBackgroundCancel = true
        };

        var modalParameters = new ModalParameters();

        modalParameters.Add("Pane", pane);

        var addStudyModal = Modal.Show<StudyFormComponent>(title: "Add a Study", parameters: modalParameters, options: options);
        var result = await addStudyModal.Result;

        if (result.Confirmed)
        {
            var study = result.Data as Study;
            Studies.Add(study);

            study.Compute(AggregateResponse);
            await study.AddStudyToChart(JsRuntime, Id);
        }
    }

    private async Task UpdateStudy(Study studyToUpdate)
    {
        var options = new ModalOptions
        {
            DisableBackgroundCancel = true
        };

        //var savedParameters = studyToUpdate.GetType().GetProperty("SavedParameters").GetValue(studyToUpdate);
        var savedParameters = studyToUpdate.GetType();
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(StudyFormComponent.StudyType), savedParameters);

        var updateStudyModal = Modal.Show<StudyFormComponent>(title: "Edit study", parameters: modalParameters, options: options);
        var result = await updateStudyModal.Result;

        if (result.Confirmed)
        {
            await DeleteStudy(studyToUpdate);

            var newStudy = result.Data as Study;
            Studies.Add(newStudy);

            newStudy.Compute(AggregateResponse);
            await newStudy.AddStudyToChart(JsRuntime, Id);
        }
    }

    private async Task DeleteStudy(Study studyToDelete)
    {
        await studyToDelete.RemoveStudyFromChart(JsRuntime, Id);
        Studies.Remove(studyToDelete);

        await AdjustStudiesIfPaneEmpty(studyToDelete.Pane);
    }

    private async Task MoveStudyUp(Study studyToMove)
    {
        await studyToMove.RemoveStudyFromChart(JsRuntime, Id);
        
        studyToMove.Pane--;
        await studyToMove.AddStudyToChart(JsRuntime, Id);

        await AdjustStudiesIfPaneEmpty(studyToMove.Pane + 1);
    }

    private async Task MoveStudyDown(Study studyToMove)
    {
        await studyToMove.RemoveStudyFromChart(JsRuntime, Id);

        studyToMove.Pane++;
        await studyToMove.AddStudyToChart(JsRuntime, Id);

        await AdjustStudiesIfPaneEmpty(studyToMove.Pane - 1);
    }

    private async Task AdjustStudiesIfPaneEmpty(int paneToRemove)
    {
        if (!Studies.Any(q => q.Pane == paneToRemove) && paneToRemove > 0)
        {
            var studiesToAdjust = Studies.Where(q => q.Pane > paneToRemove);
            foreach (var study in studiesToAdjust)
            {
                study.Pane--;
            }
            await JsRuntime.InvokeVoidAsync("RemovePane", Id, paneToRemove);
        }
    }

    private async Task Close()
    {
        await ViewStudiesModal.CloseAsync(ModalResult.Ok(Studies));
    }
}
