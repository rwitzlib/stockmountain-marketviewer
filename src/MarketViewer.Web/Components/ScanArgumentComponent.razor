@inject IJSRuntime JsRuntime;

<MudPaper Elevation="@(Argument.Depth * 2)" Class="ma-4 row" id="outer-dropzone">
    <div class="col-1">
        <MudSelect @bind-Value="Argument.Operator" T="string" Label="Operator" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("AND")" />
            <MudSelectItem Value="@("OR")" />
        </MudSelect>

        @if (Argument.Argument is not null)
        {
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveInnerArgument">Delete</MudButton>
        }
    </div>
    <div class="col-11">
        @if (Argument.Argument is null)
        {
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddInnerArgument">Add Argument</MudButton>
        }
        else
        {
            <ScanArgumentComponent PageId="@PageId" Parent="this" Argument="Argument.Argument"></ScanArgumentComponent>
        }

        <div id="@Argument.Id" class="card dropzone">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddFilter">Add Filter</MudButton>
            @foreach (var filter in Argument.Filters)
            {
                <FilterComponent Argument="this" Filter="filter"></FilterComponent>
            }
        </div>
    </div>
</MudPaper>

@code {
    [Parameter] public string PageId { get; set; }
    [Parameter] public ScanArgumentZone Argument { get; set; }
    [Parameter] public ScanArgumentComponent Parent { get; set; }

    private IJSInProcessRuntime JsInProcessRuntime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
        }
    }

    public void Render()
    {
        StateHasChanged();
    }

    private void AddInnerArgument()
    {
        Argument.Argument = new ScanArgumentZone
        {
            Id = Guid.NewGuid().ToString(),
            Depth = Argument.Depth++,
            Filters = new List<FilterItem>()
        };
        JsInProcessRuntime.InvokeVoid("addArgumentToArgument", PageId, Argument.Id, Argument.Argument.Id);
    }

    private void RemoveInnerArgument()
    {
        Argument.Argument = null;
        JsInProcessRuntime.InvokeVoid("removeArgumentFromArgument", PageId, Argument.Id);
    }   

    private void AddFilter()
    {
        var filter = new FilterItem();
        Argument.Filters.Add(filter);
        JsInProcessRuntime.InvokeVoid("addFilterToArgument", PageId, Argument.Id, filter.Id);

        if (Parent is not null)
        {
            Parent.Render();
        }
    }

    public void RemoveFilter(FilterItem filterItem)
    {
        Argument.Filters.Remove(filterItem);
        JsInProcessRuntime.InvokeVoid("removeFilterFromArgument", PageId, Argument.Id, filterItem.Id);
        StateHasChanged();
    }
}
