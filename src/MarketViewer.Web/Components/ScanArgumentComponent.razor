@inject IJSRuntime JsRuntime;

<MudPaper Elevation="Argument.Depth" Class="ma-4" id="outer-dropzone">
    @if(Argument.Argument is null)
    {
        <button class="btn btn-primary m-2" style="width: 150px" @onclick="AddArgument">Add Argument</button>
    }
    else
    {
        <button class="btn btn-danger m-2" @onclick="RemoveArgument"><i class="fa-solid fa-trash"></i></button>
        <ScanArgumentComponent Argument="Argument.Argument"></ScanArgumentComponent>
    }
    <div class="dropdown">
        <select class="form-select m-2" style="width: 150px">
            <option selected value="1">AND</option>
            <option value="2">OR</option>
        </select>
    </div>
    <div id="@Argument.Id" class="card dropzone">
        @Argument.Id
        <button class="btn btn-success m-2" style="width: 150px" @onclick="AddFilter">Add Filter@* <i class="fa-solid fa-plus"></i> *@</button>
        @foreach (var filter in Argument.Filters)
        {
            <MudPaper id="@filter.Id" Class="drag-drop filter">@filter.Id</MudPaper>
        }
        <MudPaper Class="drag-drop filter">asdf</MudPaper>
    </div>
</MudPaper>

@code {
    [CascadingParameter] public string PageId { get; set; }
    [Parameter] public ScanArgumentZone Argument { get; set; }

    private IJSInProcessRuntime JsInProcessRuntime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
        }
    }

    private void AddArgument()
    {
        Argument.Argument = new ScanArgumentZone
        {
            Id = Guid.NewGuid().ToString(),
            Depth = Argument.Depth + 2,
            Filters = new List<FilterItem>()
        };
        JsInProcessRuntime.InvokeVoid("addArgumentToArgument", PageId, Argument.Id, Argument.Argument.Id);
    }

    private void RemoveArgument()
    {
        Argument.Argument = null;
        JsInProcessRuntime.InvokeVoid("removeArgumentFromArgument", PageId, Argument.Id);
    }   

    private void AddFilter()
    {
        var filter = new FilterItem();
        Argument.Filters.Add(filter);
        JsInProcessRuntime.InvokeVoid("addFilterToArgument", PageId, Argument.Id, filter.Id);
    }

    private void RemoveFilter(FilterItem filterItem)
    {
        JsInProcessRuntime.InvokeVoid("removeFilterFromArgument", PageId, Argument.Id, filterItem.Id);
    }
}
