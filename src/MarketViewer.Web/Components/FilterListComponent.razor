@    using FilterOperator = FilterOperator;
@    using MarketViewer.Contracts.Enums;
@    using MarketViewer.Contracts.Enums.Scan;
@    using MarketViewer.Contracts.Models.ScanV2

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel IsInitiallyExpanded="true" HideIcon="true">
        <TitleContent>
            <div class="d-flex align-center">
                <MudText><strong>Filters</strong></MudText>
                <MudBadge Content="@(Entries.Count(q => q.Enabled))" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                    <MudIcon Icon="@Icons.Material.Filled.FilterAlt" Size="Size.Large"></MudIcon>
                </MudBadge>
            </div>
        </TitleContent>
        <ChildContent>
            @if (Entries.Any())
            {
                <ul class="list-group" style="width: 100%">
                    <li class="list-group-item">
                        @{
                            foreach (var entry in Entries)
                            {
                                <div class="input-group" role="group" aria-label="FilterParameters">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input align-self-center" type="checkbox" id="flexSwitchCheckChecked" checked @onclick="(() => entry.Enabled = !entry.Enabled)">
                                    </div>
                                    <select class="form-select" @bind="entry.Filter.Type">
                                        @{
                                            foreach (var value in Enum.GetValues(typeof(FilterType)))
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        }
                                    </select>
                                    <select class="form-select" @bind="entry.Filter.Modifier">
                                        @{
                                            foreach (var value in Enum.GetValues(typeof(FilterTypeModifier)))
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        }
                                    </select>
                                    <span class="input-group-text">is</span>
                                    <select class="form-select" @bind="entry.Filter.Operator">
                                        <option value="@FilterOperator.gt">Greater Than</option>
                                        <option value="@FilterOperator.lt">Less Than</option>
                                        <option value="@FilterOperator.eq">Equal To</option>
                                        <option value="@FilterOperator.ge">Greater Than or Equal To</option>
                                        <option value="@FilterOperator.le">Less Than or Equal To</option>
                                    </select>
                                    <select class="form-select" @bind="entry.Filter.ValueType">
                                        @{
                                            foreach (var value in Enum.GetValues(typeof(FilterValueType)))
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        }
                                    </select>
                                    @{
                                        if (entry.Filter.ValueType.Equals(FilterValueType.CustomAmount))
                                        {
                                            <input type="text" class="form-control" id="filterValue" @bind="entry.Filter.Value" />
                                        }
                                    }
                                    <span class="input-group-text">in the last</span>
                                    <input type="text" class="form-control" id="filterMultiplier" @bind="entry.Filter.Multiplier" />
                                    <select class="form-select" @bind="entry.Filter.Timespan">
                                        @{
                                            foreach (var value in Enum.GetValues(typeof(MarketViewer.Contracts.Enums.Timespan)))
                                            {
                                                <option value="@value">@(value)(s)</option>
                                            }
                                        }
                                    </select>
                                    <div class="btn-group float-end" role="group" aria-label="study1">
                                        <button type="button" class="btn btn-danger" @onclick="() => Entries.Remove(entry)"><i class="fa-solid fa-trash"></i></button>
                                    </div>
                                </div>
                            }
                        }
                    </li>
                </ul>
            }
            <MudButton Class="justify-center align-center pa-2" Variant="Variant.Filled" Color="Color.Success"
                       @onclick="() => Entries.Add(new FilterEntry(true, new Filter()))" StartIcon="@Icons.Material.Filled.Add">
                Add New Filter
            </MudButton>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    public List<FilterEntry> Entries { get; set; } = new();

    protected override void OnInitialized()
    {
        Entries.Add(new FilterEntry(true, new Filter
        {
            Type = FilterType.Volume,
            Modifier = FilterTypeModifier.Value,
            Operator = FilterOperator.gt,
            Value = 100000,
            ValueType = FilterValueType.CustomAmount,
            Multiplier = 5,
            Timespan = Timespan.minute,
        }));
        Entries.Add(new FilterEntry(true, new Filter
        {
            Type = FilterType.Price,
            Modifier = FilterTypeModifier.Value,
            Operator = FilterOperator.gt,
            Value = 2,
            ValueType = FilterValueType.CustomAmount,
            Multiplier = 5,
            Timespan = Timespan.minute,
        }));
        Entries.Add(new FilterEntry(true, new Filter
        {
            Type = FilterType.Price,
            Modifier = FilterTypeModifier.Value,
            Operator = FilterOperator.lt,
            Value = 20,
            ValueType = FilterValueType.CustomAmount,
            Multiplier = 5,
            Timespan = Timespan.minute,
        }));
        Entries.Add(new FilterEntry(true, new Filter
        {
            Type = FilterType.Macd,
            Modifier = FilterTypeModifier.Slope,
            Operator = FilterOperator.gt,
            Value = 0,
            ValueType = FilterValueType.CustomAmount,
            Multiplier = 3,
            Timespan = Timespan.minute,
        }));
        Entries.Add(new FilterEntry(true, new Filter
        {
            Type = FilterType.Macd,
            Modifier = FilterTypeModifier.Value,
            Operator = FilterOperator.lt,
            Value = 0,
            ValueType = FilterValueType.CustomAmount,
            Multiplier = 2,
            Timespan = Timespan.minute,
        }));
    }
}
