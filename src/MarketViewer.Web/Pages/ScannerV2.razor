@page "/scannerV2"

@inherits ComponentBase;
@inject IJSRuntime JsRuntime;

<PageTitle>Scanner V2</PageTitle>

<CascadingValue Value="@PageId" IsFixed="true" >
    @if (Argument is not null)
    {
        <button class="btn btn-danger m-2" @onclick="RemoveArgument"><i class="fa-solid fa-trash"></i></button>
        <ScanArgumentComponent Argument="Argument"></ScanArgumentComponent>
    
    }
    else
    {
        <button class="btn btn-primary btn-sm" @onclick="AddArgument">Add Argument</button>
    }
</CascadingValue>


@code {
    public string PageId = Guid.NewGuid().ToString();
    private ScanArgumentZone Argument;
    private DotNetObjectReference<ScannerV2> ObjectReference;
    private IJSInProcessRuntime JsInProcessRuntime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
            ObjectReference = DotNetObjectReference.Create(this);
            JsInProcessRuntime.InvokeVoid("initializePage", PageId, ObjectReference);
        }
    }

    private void AddArgument()
    {
        Argument = new ScanArgumentZone
        {
            Id = Guid.NewGuid().ToString(),
            Operator = "AND",
            Filters = new List<FilterItem>()
        };
        JsInProcessRuntime.InvokeVoid("addInitialArgument", PageId, Argument.Id);
    }

    private void RemoveArgument()
    {
        Argument = null;
    }

    [JSInvokable]
    public void TogglePopover(bool isPopoverOpen, string drawingId = null)
    {
        // IsPopoverOpen = isPopoverOpen;

        // if (!IsPopoverOpen)
        // {
        //     StateHasChanged();
        //     return;
        // }

        // if (drawingId is not null)
        // {
        //     ClickedDrawingId = drawingId;
        // }

        StateHasChanged();
    }
}

<style>
    .dropzone {
        background-color: #bfe4ff;
        border: dashed 4px transparent;
        border-radius: 4px;
        margin: 10px auto 30px;
        padding: 10px;
        transition: background-color 0.3s;
    }

    .drop-active {
        border-color: #aaa;
    }

    .drop-target {
        background-color: #29e;
        border-color: #fff;
        border-style: solid;
    }

    .drag-drop {
        display: inline-block;
        min-width: 40px;
        padding: 2em 0.5em;
        margin: 1rem 0 0 1rem;
        color: #fff;
        background-color: #29e;
        border: solid 2px #fff;
        touch-action: none;
        transform: translate(0px, 0px);
        transition: background-color 0.3s;
    }

    .drag-drop.can-drop {
        color: #000;
        background-color: #4e4;
    }
</style>