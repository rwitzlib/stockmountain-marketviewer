@page "/scannerV2"

@inherits ComponentBase;
@inject IJSRuntime JsRuntime;

<PageTitle>Scanner V2</PageTitle>

@if (Argument is not null)
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveArgument">Delete</MudButton>
    <ScanArgumentComponent PageId="PageId" Argument="Argument"></ScanArgumentComponent>
}
else
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddArgument">Add Argument</MudButton>
}

@code {
    public string PageId = Guid.NewGuid().ToString();
    private ScanArgumentZone Argument;
    private DotNetObjectReference<ScannerV2> ObjectReference;
    private IJSInProcessRuntime JsInProcessRuntime;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
            ObjectReference = DotNetObjectReference.Create(this);
            JsInProcessRuntime.InvokeVoid("initializePage", PageId, ObjectReference);
        }
    }

    private void AddArgument()
    {
        Argument = new ScanArgumentZone
        {
            Id = Guid.NewGuid().ToString(),
            Operator = "AND",
            Filters = new List<FilterItem>()
        };
        JsInProcessRuntime.InvokeVoid("addInitialArgument", PageId, Argument.Id);
    }

    private void RemoveArgument()
    {
        Argument = null;
        JsInProcessRuntime.InvokeVoidAsync("removeInitialArgument", PageId);
    }

    [JSInvokable]
    public void MoveFilter(string sourceArgumentId, string destinationArgumentId, string filterId)
    {
        var sourceArgument = FindArgument(Argument, sourceArgumentId);
        var destinationArgument = FindArgument(Argument, destinationArgumentId);

        if (sourceArgument is null || destinationArgument is null)
        {
            return;
        }

        var filter = sourceArgument.Filters.Find(filter => filter.Id == filterId);

        sourceArgument.Filters.Remove(filter);
        destinationArgument.Filters.Add(filter);

        StateHasChanged();
    }

    private ScanArgumentZone FindArgument(ScanArgumentZone argument, string argumentId)
    {
        if (argument.Id is null)
        {
            return null;
        }
        
        if (argument.Id == argumentId)
        {
            return argument;
        }

        if (argument.Argument is null)
        {
            return null;
        }

        return FindArgument(argument.Argument, argumentId);
    }
}

<style>
    .dropzone {
        background-color: #bfe4ff;
        border: dashed 4px transparent;
        border-radius: 4px;
        margin: 10px auto 30px;
        padding: 10px;
        user-select: none;
        transition: background-color 0.3s;
    }

    .drop-active {
        border-color: #aaa;
    }

    .drop-target {
        background-color: #29e;
        border-color: #fff;
        border-style: solid;
    }

    .drag-drop {
        display: inline-block;
        min-width: 40px;
        padding: 2em 0.5em;
        margin: 1rem 0 0 1rem;
        color: #fff;
        border: solid 2px #fff;
        touch-action: none;
        transform: translate(0px, 0px);
        transition: background-color 0.3s;
        z-index: 100;
    }

    .drag-drop.can-drop {
        color: #000;
    }
</style>