@page "/backtest/v2"

@using MarketViewer.Contracts.Enums
@using MarketViewer.Contracts.Models.Backtest
@using MarketViewer.Contracts.Models.ScanV2
@using MarketViewer.Contracts.Requests
@using System.Collections.Generic;
@using MarketViewer.Contracts.Requests.Backtest

@inherits ComponentBase;

@inject Services.BacktestService BacktestService;
@inject IJSRuntime JsRuntime;

<PageTitle>Backtest V2</PageTitle>

<div id="scannerSettings" class="pa-2">
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel IsInitiallyExpanded="true" HideIcon="true">
            <TitleContent>
                <div class="d-flex align-center">
                    <MudText><strong>Filters</strong></MudText>
                    <MudBadge Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                        <MudIcon Icon="@Icons.Material.Filled.FilterAlt" Size="Size.Large"></MudIcon>
                    </MudBadge>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Argument is not null)
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveArgument">Delete</MudButton>
                    <ScanArgumentComponent PageId="@PageId" Argument="@Argument"></ScanArgumentComponent>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddArgument">Add Argument</MudButton>
                }
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

<MudPaper Style="overflow-y: scroll;">
    <MudTable Items="@_backtestEntries" FixedHeader="true" Virtualize="true" FixedFooter="true" Loading="@(!_backtestEntries.Any())">
        <ToolBarContent>
            <MudDateRangePicker Style="flex-shrink" @bind-DateRange="@_dateRange" MinDate="_minDate" MaxDate="@_maxDate" Margin="Margin.Dense" />
            <MudButton Class="ma-2" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.PlayArrow" @onclick="StartBacktesting">Start Backtesting</MudButton>
            <MudButton Class="ma-2" Style="flex: none;" Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Clear" @onclick="() => _backtestEntries.Clear()">
                Remove All Entries
            </MudButton>
            <p>Avg. Uptrend %: @PercentHigher</p>
            <p>Avg. Long Profit: @LongProfit</p>
            <p>Avg. Downtrend %: @PercentLower</p>
            <p>Avg. Short Profit: @ShortProfit</p>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="z-index: 1500;">Date</MudTh>
            <MudTh Style="z-index: 1500;">Uptrend %</MudTh>
            <MudTh Style="z-index: 1500;">Uptrend %</MudTh>
            <MudTh Style="z-index: 1500;">Downtrend %</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Uptrend %">@context.LongRatio</MudTd>
            <MudTd DataLabel="Uptrend %">@context.LongPositionChange</MudTd>
            <MudTd DataLabel="Downtrend %">@context.ShortRatio</MudTd>
            <MudTd DataLabel="Downtrend %">@context.ShortPositionChange</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private DateRange _dateRange { get; set; } = new DateRange(DateTime.Parse("2024-03-05"), DateTime.Parse("2024-03-05"));
    private DateTime _minDate = DateTime.Now.Date.AddYears(-1);
    private DateTime _maxDate = DateTime.Now.Date.AddDays(-1);

    private FilterListComponent _filterList { get; set; } = new();
    public string PageId = Guid.NewGuid().ToString();
    private ScanArgumentZone Argument;

    private DotNetObjectReference<BacktestV2> ObjectReference;
    private IJSInProcessRuntime JsInProcessRuntime;

    private List<BacktestEntry> _backtestEntries { get; set; } = new();

    private double PercentHigher { get; set; } = 0;
    private double PercentLower { get; set; } = 0;
    private double LongProfit { get; set; } = 0;
    private double ShortProfit { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsInProcessRuntime = (IJSInProcessRuntime)JsRuntime;
            ObjectReference = DotNetObjectReference.Create(this);
            JsInProcessRuntime.InvokeVoid("initializePage", PageId, ObjectReference);
        }
        // await JsRuntime.InvokeVoidAsync("AddScannerResize");
    }

    [JSInvokable]
    public void MoveFilter(string sourceArgumentId, string destinationArgumentId, string filterId)
    {
        var sourceArgument = FindArgument(Argument, sourceArgumentId);
        var destinationArgument = FindArgument(Argument, destinationArgumentId);

        if (sourceArgument is null || destinationArgument is null)
        {
            return;
        }

        var filter = sourceArgument.Filters.Find(filter => filter.Id == filterId);

        sourceArgument.Filters.Remove(filter);
        destinationArgument.Filters.Add(filter);

        StateHasChanged();
    }

    private ScanArgumentZone FindArgument(ScanArgumentZone argument, string argumentId)
    {
        if (argument.Id is null)
        {
            return null;
        }

        if (argument.Id == argumentId)
        {
            return argument;
        }

        if (argument.Argument is null)
        {
            return null;
        }

        return FindArgument(argument.Argument, argumentId);
    }

    private void AddArgument()
    {
        Argument = new ScanArgumentZone
            {
                Id = Guid.NewGuid().ToString(),
                Operator = "AND",
                Filters = new List<FilterItem>()
            };
        JsInProcessRuntime.InvokeVoid("addInitialArgument", PageId, Argument.Id);
    }

    private void RemoveArgument()
    {
        Argument = null;
        JsInProcessRuntime.InvokeVoidAsync("removeInitialArgument", PageId);
    }

    private async Task StartBacktesting()
    {
        var filters = _filterList.Entries.Where(q => q.Enabled == true).Select(q => q.Filter).ToArray();

        var argument = ConvertArgument(Argument);

        var request = new BacktestV2Request
        {
            Start = (DateTimeOffset)_dateRange.Start,
            End = (DateTimeOffset)_dateRange.End,
            PositionSize = 100,
            Argument = argument,
            Multiplier = 5,
            Timespan = Timespan.minute
        };

        var response = await BacktestService.BacktestV2Async(request);

        _backtestEntries = response.Results.ToList();

        PercentHigher = response.LongRatioAvg;
        PercentLower = response.ShortRatioAvg;
        LongProfit = response.LongPositionAvgChange;
        ShortProfit = response.ShortPositionAvgChange;

        StateHasChanged();
    }

    private ScanArgument ConvertArgument(ScanArgumentZone scanArgumentZone)
    {
        if (scanArgumentZone is null)
        {
            return null;
        }

        var argument = new ScanArgument
            {
                Operator = scanArgumentZone.Operator,
                Filters = []
            };

        foreach (var filter in scanArgumentZone.Filters)
        {
            argument.Filters.Add(new FilterV2
            {
                CollectionModifier = filter.CollectionModifier,
                FirstOperand = filter.FirstOperand,
                Operator = filter.Operator,
                SecondOperand = filter.SecondOperand,
                Timeframe = filter.Timeframe
            });
        }

        var innerArgument = ConvertArgument(scanArgumentZone.Argument);

        if (innerArgument is not null)
        {
            argument.Argument = innerArgument;
        }

        return argument;
    }
}